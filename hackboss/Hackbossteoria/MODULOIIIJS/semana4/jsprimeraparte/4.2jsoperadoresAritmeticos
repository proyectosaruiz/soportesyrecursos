PARA EXPONER:

1.POTENCIAS:
 LO PODEMOS HACER COMO EN CLASE ANTERIORES ASI
 console.log(Math.pow(2, 3)); DOS ELEVADO A LA TRES
  PERO TAMBIEN ASI:
       console.log(2 ** 3);
       
2.OPERADOR DE INCREMENTO ++
  SI TENEMOS UNA CONSTANTE CLICKS=0; LO HABITUAL ES CLICKS MAS 1 ASI;
    let clicks = 0;
    clicks = clicks + 1;
         console.log(clicks);
          NOS DA 0+1 QUE SERIA 1 ASI: 1
 PERO CON EL OPERADOR ++ SERIA SI:
    MUTANDO EL VALOR ES IGUAL EL VALOR QUE TENIA MAS 1, SI CLICKS UNA CONSTANTE PERO UN DATO PRIMITIVO NO MUTA. PERO CON LET LE DAMOS UN VALOR Y SUMAR AL DATO INICIAL HACER CUALQUIER ADICION.
    CLICKS ALMACENA 0 PERO SI LE PUEDO ASIGNAR UN  VALOR ADICIONAL SIN CAMBIAR EL DATO PRIMITIVO. EJEMPLO
    let clicks = 0;
       clicks++;

        console.log(clicks);
        
3.OPERADOR DE DECREMENTO
  ESTAMOS CAMBIANDO EL VALOR DE CLICKS NO EL VALOR DE 0
  
   let clicks = 0;
clicks--;

console.log(clicks); EN CONSOLA SERIA -

UNA EXPRESION ES CUALQUIER COSA QUE PODEMOS EVALUAR Y DA UN VALOR FINAL Y PODEMOS DARLE UN VALOR.ES LO QUE PODEMOS PASAR POR CONSOLA.

UNA DECLARACION DE UNA VARIABLE TAMBIEN PUEDE SALIR EN CONSOLA , EJEMPLO
 CLICKS ES UN EJEMPLO DE DECLARACION 
 
 PERO EN console.log(clicks++) ES UNA DECLARACION
         console.log(clicks)  ES UNA EXPRESION
         
  AHORA BIEN :
  
  console.log(clicks++) EN CONSOLA EJECUTA PRIMERO LA EXPRESION Y DA 0, LA EXPRESION SE EVALUA ANTES DE LA EXPRESION
  PERO:
  console.log(++clicks) NOS DA 1, YA QUE A LA EXPRESION LE SUMA 1, EL VALOR SE EVALUA AL RESULTADO DE LA SUMA.
  TENIENDO EN CUENTA SI NO LO EVUALUAMOS EN CONSOLA, SI NO SOLO LO ESTABLECEMOS EN JS ASI:
  clicks++
  ++clicks 
  LUEGO HACEMOS 
    console.log(clicks) NOS DARA 1 IGUAL
   
 
    



   
     
     
